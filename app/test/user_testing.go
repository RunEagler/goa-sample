// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "User CRUD": user TestHelpers
//
// Command:
// $ goagen
// --design=GolandProject/goa-sample/src/design
// --out=$(GOPATH)/src/GolandProject/goa-sample/src
// --version=v1.3.1

package test

import (
	"GolandProject/goa-sample/app"
	"bytes"
	"context"
	"fmt"
	"github.com/goadesign/goa"
	"github.com/goadesign/goa/goatest"
	"io"
	"log"
	"net/http"
	"net/http/httptest"
	"net/url"
	"strconv"
)

// CreateUserCreated runs the method Create of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func CreateUserCreated(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.UserController, organizationID int, dummyKey *string, tOKEN *string, payload *app.User) (http.ResponseWriter, *app.UserResponse) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Validate payload
	err := payload.Validate()
	if err != nil {
		e, ok := err.(goa.ServiceError)
		if !ok {
			panic(err) // bug
		}
		t.Errorf("unexpected payload validation error: %+v", e)
		return nil, nil
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if dummyKey != nil {
		sliceVal := []string{*dummyKey}
		query["dummy_key"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/organizations/%v/users", organizationID),
		RawQuery: query.Encode(),
	}
	req, _err := http.NewRequest("POST", u.String(), nil)
	if _err != nil {
		panic("invalid test " + _err.Error()) // bug
	}
	if tOKEN != nil {
		sliceVal := []string{*tOKEN}
		req.Header["Token"] = sliceVal
	}
	prms := url.Values{}
	prms["organizationID"] = []string{fmt.Sprintf("%v", organizationID)}
	if dummyKey != nil {
		sliceVal := []string{*dummyKey}
		prms["dummy_key"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "UserTest"), rw, req, prms)
	createCtx, __err := app.NewCreateUserContext(goaCtx, req, service)
	if __err != nil {
		_e, _ok := __err.(goa.ServiceError)
		if !_ok {
			panic("invalid test data " + __err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", _e)
		return nil, nil
	}
	createCtx.Payload = payload

	// Perform action
	__err = ctrl.Create(createCtx)

	// Validate response
	if __err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", __err, logBuf.String())
	}
	if rw.Code != 201 {
		t.Errorf("invalid response status code: got %+v, expected 201", rw.Code)
	}
	var mt *app.UserResponse
	if resp != nil {
		var __ok bool
		mt, __ok = resp.(*app.UserResponse)
		if !__ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of app.UserResponse", resp, resp)
		}
		__err = mt.Validate()
		if __err != nil {
			t.Errorf("invalid response media type: %s", __err)
		}
	}

	// Return results
	return rw, mt
}

// CreateUserInternalServerError runs the method Create of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func CreateUserInternalServerError(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.UserController, organizationID int, dummyKey *string, tOKEN *string, payload *app.User) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer

		respSetter goatest.ResponseSetterFunc = func(r interface{}) {}
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Validate payload
	err := payload.Validate()
	if err != nil {
		e, ok := err.(goa.ServiceError)
		if !ok {
			panic(err) // bug
		}
		t.Errorf("unexpected payload validation error: %+v", e)
		return nil
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if dummyKey != nil {
		sliceVal := []string{*dummyKey}
		query["dummy_key"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/organizations/%v/users", organizationID),
		RawQuery: query.Encode(),
	}
	req, _err := http.NewRequest("POST", u.String(), nil)
	if _err != nil {
		panic("invalid test " + _err.Error()) // bug
	}
	if tOKEN != nil {
		sliceVal := []string{*tOKEN}
		req.Header["Token"] = sliceVal
	}
	prms := url.Values{}
	prms["organizationID"] = []string{fmt.Sprintf("%v", organizationID)}
	if dummyKey != nil {
		sliceVal := []string{*dummyKey}
		prms["dummy_key"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "UserTest"), rw, req, prms)
	createCtx, __err := app.NewCreateUserContext(goaCtx, req, service)
	if __err != nil {
		_e, _ok := __err.(goa.ServiceError)
		if !_ok {
			panic("invalid test data " + __err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", _e)
		return nil
	}
	createCtx.Payload = payload

	// Perform action
	__err = ctrl.Create(createCtx)

	// Validate response
	if __err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", __err, logBuf.String())
	}
	if rw.Code != 500 {
		t.Errorf("invalid response status code: got %+v, expected 500", rw.Code)
	}

	// Return results
	return rw
}

// DeleteUserInternalServerError runs the method Delete of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func DeleteUserInternalServerError(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.UserController, organizationID int, userID int, dummyKey *string, tOKEN *string) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer

		respSetter goatest.ResponseSetterFunc = func(r interface{}) {}
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if dummyKey != nil {
		sliceVal := []string{*dummyKey}
		query["dummy_key"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/organizations/%v/users/%v", organizationID, userID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	if tOKEN != nil {
		sliceVal := []string{*tOKEN}
		req.Header["Token"] = sliceVal
	}
	prms := url.Values{}
	prms["organizationID"] = []string{fmt.Sprintf("%v", organizationID)}
	prms["userID"] = []string{fmt.Sprintf("%v", userID)}
	if dummyKey != nil {
		sliceVal := []string{*dummyKey}
		prms["dummy_key"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "UserTest"), rw, req, prms)
	deleteCtx, _err := app.NewDeleteUserContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil
	}

	// Perform action
	_err = ctrl.Delete(deleteCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 500 {
		t.Errorf("invalid response status code: got %+v, expected 500", rw.Code)
	}

	// Return results
	return rw
}

// DeleteUserNoContent runs the method Delete of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func DeleteUserNoContent(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.UserController, organizationID int, userID int, dummyKey *string, tOKEN *string) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer

		respSetter goatest.ResponseSetterFunc = func(r interface{}) {}
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if dummyKey != nil {
		sliceVal := []string{*dummyKey}
		query["dummy_key"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/organizations/%v/users/%v", organizationID, userID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	if tOKEN != nil {
		sliceVal := []string{*tOKEN}
		req.Header["Token"] = sliceVal
	}
	prms := url.Values{}
	prms["organizationID"] = []string{fmt.Sprintf("%v", organizationID)}
	prms["userID"] = []string{fmt.Sprintf("%v", userID)}
	if dummyKey != nil {
		sliceVal := []string{*dummyKey}
		prms["dummy_key"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "UserTest"), rw, req, prms)
	deleteCtx, _err := app.NewDeleteUserContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil
	}

	// Perform action
	_err = ctrl.Delete(deleteCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 204 {
		t.Errorf("invalid response status code: got %+v, expected 204", rw.Code)
	}

	// Return results
	return rw
}

// DeleteUserNotFound runs the method Delete of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func DeleteUserNotFound(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.UserController, organizationID int, userID int, dummyKey *string, tOKEN *string) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer

		respSetter goatest.ResponseSetterFunc = func(r interface{}) {}
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if dummyKey != nil {
		sliceVal := []string{*dummyKey}
		query["dummy_key"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/organizations/%v/users/%v", organizationID, userID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	if tOKEN != nil {
		sliceVal := []string{*tOKEN}
		req.Header["Token"] = sliceVal
	}
	prms := url.Values{}
	prms["organizationID"] = []string{fmt.Sprintf("%v", organizationID)}
	prms["userID"] = []string{fmt.Sprintf("%v", userID)}
	if dummyKey != nil {
		sliceVal := []string{*dummyKey}
		prms["dummy_key"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "UserTest"), rw, req, prms)
	deleteCtx, _err := app.NewDeleteUserContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil
	}

	// Perform action
	_err = ctrl.Delete(deleteCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 404 {
		t.Errorf("invalid response status code: got %+v, expected 404", rw.Code)
	}

	// Return results
	return rw
}

// ListUserInternalServerError runs the method List of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ListUserInternalServerError(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.UserController, organizationID int, dummyKey *string, maxAge int, tOKEN *string) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer

		respSetter goatest.ResponseSetterFunc = func(r interface{}) {}
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if dummyKey != nil {
		sliceVal := []string{*dummyKey}
		query["dummy_key"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(maxAge)}
		query["max_age"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/organizations/%v/users", organizationID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	if tOKEN != nil {
		sliceVal := []string{*tOKEN}
		req.Header["Token"] = sliceVal
	}
	prms := url.Values{}
	prms["organizationID"] = []string{fmt.Sprintf("%v", organizationID)}
	if dummyKey != nil {
		sliceVal := []string{*dummyKey}
		prms["dummy_key"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(maxAge)}
		prms["max_age"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "UserTest"), rw, req, prms)
	listCtx, _err := app.NewListUserContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil
	}

	// Perform action
	_err = ctrl.List(listCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 500 {
		t.Errorf("invalid response status code: got %+v, expected 500", rw.Code)
	}

	// Return results
	return rw
}

// ListUserOK runs the method List of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ListUserOK(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.UserController, organizationID int, dummyKey *string, maxAge int, tOKEN *string) (http.ResponseWriter, app.UserResponseCollection) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if dummyKey != nil {
		sliceVal := []string{*dummyKey}
		query["dummy_key"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(maxAge)}
		query["max_age"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/organizations/%v/users", organizationID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	if tOKEN != nil {
		sliceVal := []string{*tOKEN}
		req.Header["Token"] = sliceVal
	}
	prms := url.Values{}
	prms["organizationID"] = []string{fmt.Sprintf("%v", organizationID)}
	if dummyKey != nil {
		sliceVal := []string{*dummyKey}
		prms["dummy_key"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(maxAge)}
		prms["max_age"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "UserTest"), rw, req, prms)
	listCtx, _err := app.NewListUserContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil, nil
	}

	// Perform action
	_err = ctrl.List(listCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt app.UserResponseCollection
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(app.UserResponseCollection)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of app.UserResponseCollection", resp, resp)
		}
		_err = mt.Validate()
		if _err != nil {
			t.Errorf("invalid response media type: %s", _err)
		}
	}

	// Return results
	return rw, mt
}

// RetrieveUserInternalServerError runs the method Retrieve of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func RetrieveUserInternalServerError(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.UserController, organizationID int, userID int, dummyKey *string, tOKEN *string) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer

		respSetter goatest.ResponseSetterFunc = func(r interface{}) {}
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if dummyKey != nil {
		sliceVal := []string{*dummyKey}
		query["dummy_key"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/organizations/%v/users/%v", organizationID, userID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	if tOKEN != nil {
		sliceVal := []string{*tOKEN}
		req.Header["Token"] = sliceVal
	}
	prms := url.Values{}
	prms["organizationID"] = []string{fmt.Sprintf("%v", organizationID)}
	prms["userID"] = []string{fmt.Sprintf("%v", userID)}
	if dummyKey != nil {
		sliceVal := []string{*dummyKey}
		prms["dummy_key"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "UserTest"), rw, req, prms)
	retrieveCtx, _err := app.NewRetrieveUserContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil
	}

	// Perform action
	_err = ctrl.Retrieve(retrieveCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 500 {
		t.Errorf("invalid response status code: got %+v, expected 500", rw.Code)
	}

	// Return results
	return rw
}

// RetrieveUserNotFound runs the method Retrieve of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func RetrieveUserNotFound(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.UserController, organizationID int, userID int, dummyKey *string, tOKEN *string) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer

		respSetter goatest.ResponseSetterFunc = func(r interface{}) {}
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if dummyKey != nil {
		sliceVal := []string{*dummyKey}
		query["dummy_key"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/organizations/%v/users/%v", organizationID, userID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	if tOKEN != nil {
		sliceVal := []string{*tOKEN}
		req.Header["Token"] = sliceVal
	}
	prms := url.Values{}
	prms["organizationID"] = []string{fmt.Sprintf("%v", organizationID)}
	prms["userID"] = []string{fmt.Sprintf("%v", userID)}
	if dummyKey != nil {
		sliceVal := []string{*dummyKey}
		prms["dummy_key"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "UserTest"), rw, req, prms)
	retrieveCtx, _err := app.NewRetrieveUserContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil
	}

	// Perform action
	_err = ctrl.Retrieve(retrieveCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 404 {
		t.Errorf("invalid response status code: got %+v, expected 404", rw.Code)
	}

	// Return results
	return rw
}

// RetrieveUserOK runs the method Retrieve of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func RetrieveUserOK(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.UserController, organizationID int, userID int, dummyKey *string, tOKEN *string) (http.ResponseWriter, *app.UserResponse) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if dummyKey != nil {
		sliceVal := []string{*dummyKey}
		query["dummy_key"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/organizations/%v/users/%v", organizationID, userID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	if tOKEN != nil {
		sliceVal := []string{*tOKEN}
		req.Header["Token"] = sliceVal
	}
	prms := url.Values{}
	prms["organizationID"] = []string{fmt.Sprintf("%v", organizationID)}
	prms["userID"] = []string{fmt.Sprintf("%v", userID)}
	if dummyKey != nil {
		sliceVal := []string{*dummyKey}
		prms["dummy_key"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "UserTest"), rw, req, prms)
	retrieveCtx, _err := app.NewRetrieveUserContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil, nil
	}

	// Perform action
	_err = ctrl.Retrieve(retrieveCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt *app.UserResponse
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(*app.UserResponse)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of app.UserResponse", resp, resp)
		}
		_err = mt.Validate()
		if _err != nil {
			t.Errorf("invalid response media type: %s", _err)
		}
	}

	// Return results
	return rw, mt
}

// UpdateUserInternalServerError runs the method Update of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func UpdateUserInternalServerError(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.UserController, organizationID int, userID int, dummyKey *string, tOKEN *string, payload *app.User) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer

		respSetter goatest.ResponseSetterFunc = func(r interface{}) {}
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Validate payload
	err := payload.Validate()
	if err != nil {
		e, ok := err.(goa.ServiceError)
		if !ok {
			panic(err) // bug
		}
		t.Errorf("unexpected payload validation error: %+v", e)
		return nil
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if dummyKey != nil {
		sliceVal := []string{*dummyKey}
		query["dummy_key"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/organizations/%v/users/%v", organizationID, userID),
		RawQuery: query.Encode(),
	}
	req, _err := http.NewRequest("PUT", u.String(), nil)
	if _err != nil {
		panic("invalid test " + _err.Error()) // bug
	}
	if tOKEN != nil {
		sliceVal := []string{*tOKEN}
		req.Header["Token"] = sliceVal
	}
	prms := url.Values{}
	prms["organizationID"] = []string{fmt.Sprintf("%v", organizationID)}
	prms["userID"] = []string{fmt.Sprintf("%v", userID)}
	if dummyKey != nil {
		sliceVal := []string{*dummyKey}
		prms["dummy_key"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "UserTest"), rw, req, prms)
	updateCtx, __err := app.NewUpdateUserContext(goaCtx, req, service)
	if __err != nil {
		_e, _ok := __err.(goa.ServiceError)
		if !_ok {
			panic("invalid test data " + __err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", _e)
		return nil
	}
	updateCtx.Payload = payload

	// Perform action
	__err = ctrl.Update(updateCtx)

	// Validate response
	if __err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", __err, logBuf.String())
	}
	if rw.Code != 500 {
		t.Errorf("invalid response status code: got %+v, expected 500", rw.Code)
	}

	// Return results
	return rw
}

// UpdateUserNoContent runs the method Update of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func UpdateUserNoContent(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.UserController, organizationID int, userID int, dummyKey *string, tOKEN *string, payload *app.User) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer

		respSetter goatest.ResponseSetterFunc = func(r interface{}) {}
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Validate payload
	err := payload.Validate()
	if err != nil {
		e, ok := err.(goa.ServiceError)
		if !ok {
			panic(err) // bug
		}
		t.Errorf("unexpected payload validation error: %+v", e)
		return nil
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if dummyKey != nil {
		sliceVal := []string{*dummyKey}
		query["dummy_key"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/organizations/%v/users/%v", organizationID, userID),
		RawQuery: query.Encode(),
	}
	req, _err := http.NewRequest("PUT", u.String(), nil)
	if _err != nil {
		panic("invalid test " + _err.Error()) // bug
	}
	if tOKEN != nil {
		sliceVal := []string{*tOKEN}
		req.Header["Token"] = sliceVal
	}
	prms := url.Values{}
	prms["organizationID"] = []string{fmt.Sprintf("%v", organizationID)}
	prms["userID"] = []string{fmt.Sprintf("%v", userID)}
	if dummyKey != nil {
		sliceVal := []string{*dummyKey}
		prms["dummy_key"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "UserTest"), rw, req, prms)
	updateCtx, __err := app.NewUpdateUserContext(goaCtx, req, service)
	if __err != nil {
		_e, _ok := __err.(goa.ServiceError)
		if !_ok {
			panic("invalid test data " + __err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", _e)
		return nil
	}
	updateCtx.Payload = payload

	// Perform action
	__err = ctrl.Update(updateCtx)

	// Validate response
	if __err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", __err, logBuf.String())
	}
	if rw.Code != 204 {
		t.Errorf("invalid response status code: got %+v, expected 204", rw.Code)
	}

	// Return results
	return rw
}

// UpdateUserNotFound runs the method Update of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func UpdateUserNotFound(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.UserController, organizationID int, userID int, dummyKey *string, tOKEN *string, payload *app.User) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer

		respSetter goatest.ResponseSetterFunc = func(r interface{}) {}
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Validate payload
	err := payload.Validate()
	if err != nil {
		e, ok := err.(goa.ServiceError)
		if !ok {
			panic(err) // bug
		}
		t.Errorf("unexpected payload validation error: %+v", e)
		return nil
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if dummyKey != nil {
		sliceVal := []string{*dummyKey}
		query["dummy_key"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/organizations/%v/users/%v", organizationID, userID),
		RawQuery: query.Encode(),
	}
	req, _err := http.NewRequest("PUT", u.String(), nil)
	if _err != nil {
		panic("invalid test " + _err.Error()) // bug
	}
	if tOKEN != nil {
		sliceVal := []string{*tOKEN}
		req.Header["Token"] = sliceVal
	}
	prms := url.Values{}
	prms["organizationID"] = []string{fmt.Sprintf("%v", organizationID)}
	prms["userID"] = []string{fmt.Sprintf("%v", userID)}
	if dummyKey != nil {
		sliceVal := []string{*dummyKey}
		prms["dummy_key"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "UserTest"), rw, req, prms)
	updateCtx, __err := app.NewUpdateUserContext(goaCtx, req, service)
	if __err != nil {
		_e, _ok := __err.(goa.ServiceError)
		if !_ok {
			panic("invalid test data " + __err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", _e)
		return nil
	}
	updateCtx.Payload = payload

	// Perform action
	__err = ctrl.Update(updateCtx)

	// Validate response
	if __err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", __err, logBuf.String())
	}
	if rw.Code != 404 {
		t.Errorf("invalid response status code: got %+v, expected 404", rw.Code)
	}

	// Return results
	return rw
}
