// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "User CRUD": Application Contexts
//
// Command:
// $ goagen
// --design=GolandProject/goa-sample/src/design
// --out=$(GOPATH)/src/GolandProject/goa-sample/src
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
	"unicode/utf8"
)

// CreateUserContext provides the user create action context.
type CreateUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	TOKEN          *string
	DummyKey       *string
	OrganizationID int
	Payload        *User
}

// NewCreateUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller create action.
func NewCreateUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	headerTOKEN := req.Header["Token"]
	if len(headerTOKEN) > 0 {
		rawTOKEN := headerTOKEN[0]
		req.Params["TOKEN"] = []string{rawTOKEN}
		rctx.TOKEN = &rawTOKEN
	}
	paramDummyKey := req.Params["dummy_key"]
	if len(paramDummyKey) > 0 {
		rawDummyKey := paramDummyKey[0]
		rctx.DummyKey = &rawDummyKey
		if rctx.DummyKey != nil {
			if utf8.RuneCountInString(*rctx.DummyKey) > 10 {
				err = goa.MergeErrors(err, goa.InvalidLengthError(`dummy_key`, *rctx.DummyKey, utf8.RuneCountInString(*rctx.DummyKey), 10, false))
			}
		}
	}
	paramOrganizationID := req.Params["organizationID"]
	if len(paramOrganizationID) > 0 {
		rawOrganizationID := paramOrganizationID[0]
		if organizationID, err2 := strconv.Atoi(rawOrganizationID); err2 == nil {
			rctx.OrganizationID = organizationID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("organizationID", rawOrganizationID, "integer"))
		}
	}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateUserContext) Created(r *UserResponse) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user.response+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateUserContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// DeleteUserContext provides the user delete action context.
type DeleteUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	TOKEN          *string
	DummyKey       *string
	OrganizationID int
	UserID         int
}

// NewDeleteUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller delete action.
func NewDeleteUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	headerTOKEN := req.Header["Token"]
	if len(headerTOKEN) > 0 {
		rawTOKEN := headerTOKEN[0]
		req.Params["TOKEN"] = []string{rawTOKEN}
		rctx.TOKEN = &rawTOKEN
	}
	paramDummyKey := req.Params["dummy_key"]
	if len(paramDummyKey) > 0 {
		rawDummyKey := paramDummyKey[0]
		rctx.DummyKey = &rawDummyKey
		if rctx.DummyKey != nil {
			if utf8.RuneCountInString(*rctx.DummyKey) > 10 {
				err = goa.MergeErrors(err, goa.InvalidLengthError(`dummy_key`, *rctx.DummyKey, utf8.RuneCountInString(*rctx.DummyKey), 10, false))
			}
		}
	}
	paramOrganizationID := req.Params["organizationID"]
	if len(paramOrganizationID) > 0 {
		rawOrganizationID := paramOrganizationID[0]
		if organizationID, err2 := strconv.Atoi(rawOrganizationID); err2 == nil {
			rctx.OrganizationID = organizationID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("organizationID", rawOrganizationID, "integer"))
		}
	}
	paramUserID := req.Params["userID"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userID", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteUserContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteUserContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteUserContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ListUserContext provides the user list action context.
type ListUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	TOKEN          *string
	DummyKey       *string
	MaxAge         int
	OrganizationID int
}

// NewListUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller list action.
func NewListUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	headerTOKEN := req.Header["Token"]
	if len(headerTOKEN) > 0 {
		rawTOKEN := headerTOKEN[0]
		req.Params["TOKEN"] = []string{rawTOKEN}
		rctx.TOKEN = &rawTOKEN
	}
	paramDummyKey := req.Params["dummy_key"]
	if len(paramDummyKey) > 0 {
		rawDummyKey := paramDummyKey[0]
		rctx.DummyKey = &rawDummyKey
		if rctx.DummyKey != nil {
			if utf8.RuneCountInString(*rctx.DummyKey) > 10 {
				err = goa.MergeErrors(err, goa.InvalidLengthError(`dummy_key`, *rctx.DummyKey, utf8.RuneCountInString(*rctx.DummyKey), 10, false))
			}
		}
	}
	paramMaxAge := req.Params["max_age"]
	if len(paramMaxAge) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("max_age"))
	} else {
		rawMaxAge := paramMaxAge[0]
		if maxAge, err2 := strconv.Atoi(rawMaxAge); err2 == nil {
			rctx.MaxAge = maxAge
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("max_age", rawMaxAge, "integer"))
		}
	}
	paramOrganizationID := req.Params["organizationID"]
	if len(paramOrganizationID) > 0 {
		rawOrganizationID := paramOrganizationID[0]
		if organizationID, err2 := strconv.Atoi(rawOrganizationID); err2 == nil {
			rctx.OrganizationID = organizationID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("organizationID", rawOrganizationID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListUserContext) OK(r UserResponseCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user.response+json; type=collection")
	}
	if r == nil {
		r = UserResponseCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListUserContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// RetrieveUserContext provides the user retrieve action context.
type RetrieveUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	TOKEN          *string
	DummyKey       *string
	OrganizationID int
	UserID         int
}

// NewRetrieveUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller retrieve action.
func NewRetrieveUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*RetrieveUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := RetrieveUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	headerTOKEN := req.Header["Token"]
	if len(headerTOKEN) > 0 {
		rawTOKEN := headerTOKEN[0]
		req.Params["TOKEN"] = []string{rawTOKEN}
		rctx.TOKEN = &rawTOKEN
	}
	paramDummyKey := req.Params["dummy_key"]
	if len(paramDummyKey) > 0 {
		rawDummyKey := paramDummyKey[0]
		rctx.DummyKey = &rawDummyKey
		if rctx.DummyKey != nil {
			if utf8.RuneCountInString(*rctx.DummyKey) > 10 {
				err = goa.MergeErrors(err, goa.InvalidLengthError(`dummy_key`, *rctx.DummyKey, utf8.RuneCountInString(*rctx.DummyKey), 10, false))
			}
		}
	}
	paramOrganizationID := req.Params["organizationID"]
	if len(paramOrganizationID) > 0 {
		rawOrganizationID := paramOrganizationID[0]
		if organizationID, err2 := strconv.Atoi(rawOrganizationID); err2 == nil {
			rctx.OrganizationID = organizationID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("organizationID", rawOrganizationID, "integer"))
		}
	}
	paramUserID := req.Params["userID"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userID", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *RetrieveUserContext) OK(r *UserResponse) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user.response+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *RetrieveUserContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *RetrieveUserContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// UpdateUserContext provides the user update action context.
type UpdateUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	TOKEN          *string
	DummyKey       *string
	OrganizationID int
	UserID         int
	Payload        *User
}

// NewUpdateUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller update action.
func NewUpdateUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	headerTOKEN := req.Header["Token"]
	if len(headerTOKEN) > 0 {
		rawTOKEN := headerTOKEN[0]
		req.Params["TOKEN"] = []string{rawTOKEN}
		rctx.TOKEN = &rawTOKEN
	}
	paramDummyKey := req.Params["dummy_key"]
	if len(paramDummyKey) > 0 {
		rawDummyKey := paramDummyKey[0]
		rctx.DummyKey = &rawDummyKey
		if rctx.DummyKey != nil {
			if utf8.RuneCountInString(*rctx.DummyKey) > 10 {
				err = goa.MergeErrors(err, goa.InvalidLengthError(`dummy_key`, *rctx.DummyKey, utf8.RuneCountInString(*rctx.DummyKey), 10, false))
			}
		}
	}
	paramOrganizationID := req.Params["organizationID"]
	if len(paramOrganizationID) > 0 {
		rawOrganizationID := paramOrganizationID[0]
		if organizationID, err2 := strconv.Atoi(rawOrganizationID); err2 == nil {
			rctx.OrganizationID = organizationID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("organizationID", rawOrganizationID, "integer"))
		}
	}
	paramUserID := req.Params["userID"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userID", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdateUserContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateUserContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateUserContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}
