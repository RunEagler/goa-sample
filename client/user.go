// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "User CRUD": user Resource Client
//
// Command:
// $ goagen
// --design=GolandProject/goa-sample/src/design
// --out=$(GOPATH)/src/GolandProject/goa-sample/src
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// CreateUserPath computes a request path to the create action of user.
func CreateUserPath(organizationID int) string {
	param0 := strconv.Itoa(organizationID)

	return fmt.Sprintf("/organizations/%s/users", param0)
}

// create user
func (c *Client) CreateUser(ctx context.Context, path string, payload *User, dummyKey *string, contentType string) (*http.Response, error) {
	req, err := c.NewCreateUserRequest(ctx, path, payload, dummyKey, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateUserRequest create the request corresponding to the create action endpoint of the user resource.
func (c *Client) NewCreateUserRequest(ctx context.Context, path string, payload *User, dummyKey *string, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if dummyKey != nil {
		values.Set("dummy_key", *dummyKey)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// DeleteUserPath computes a request path to the delete action of user.
func DeleteUserPath(organizationID int, userID int) string {
	param0 := strconv.Itoa(organizationID)
	param1 := strconv.Itoa(userID)

	return fmt.Sprintf("/organizations/%s/users/%s", param0, param1)
}

// delete user
func (c *Client) DeleteUser(ctx context.Context, path string, dummyKey *string) (*http.Response, error) {
	req, err := c.NewDeleteUserRequest(ctx, path, dummyKey)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteUserRequest create the request corresponding to the delete action endpoint of the user resource.
func (c *Client) NewDeleteUserRequest(ctx context.Context, path string, dummyKey *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if dummyKey != nil {
		values.Set("dummy_key", *dummyKey)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListUserPath computes a request path to the list action of user.
func ListUserPath(organizationID int) string {
	param0 := strconv.Itoa(organizationID)

	return fmt.Sprintf("/organizations/%s/users", param0)
}

// get user list
func (c *Client) ListUser(ctx context.Context, path string, maxAge int, dummyKey *string) (*http.Response, error) {
	req, err := c.NewListUserRequest(ctx, path, maxAge, dummyKey)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListUserRequest create the request corresponding to the list action endpoint of the user resource.
func (c *Client) NewListUserRequest(ctx context.Context, path string, maxAge int, dummyKey *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	tmp6 := strconv.Itoa(maxAge)
	values.Set("max_age", tmp6)
	if dummyKey != nil {
		values.Set("dummy_key", *dummyKey)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// RetrieveUserPath computes a request path to the retrieve action of user.
func RetrieveUserPath(organizationID int, userID int) string {
	param0 := strconv.Itoa(organizationID)
	param1 := strconv.Itoa(userID)

	return fmt.Sprintf("/organizations/%s/users/%s", param0, param1)
}

// get user detail
func (c *Client) RetrieveUser(ctx context.Context, path string, dummyKey *string) (*http.Response, error) {
	req, err := c.NewRetrieveUserRequest(ctx, path, dummyKey)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewRetrieveUserRequest create the request corresponding to the retrieve action endpoint of the user resource.
func (c *Client) NewRetrieveUserRequest(ctx context.Context, path string, dummyKey *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if dummyKey != nil {
		values.Set("dummy_key", *dummyKey)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateUserPath computes a request path to the update action of user.
func UpdateUserPath(organizationID int, userID int) string {
	param0 := strconv.Itoa(organizationID)
	param1 := strconv.Itoa(userID)

	return fmt.Sprintf("/organizations/%s/users/%s", param0, param1)
}

// update user
func (c *Client) UpdateUser(ctx context.Context, path string, payload *User, dummyKey *string, contentType string) (*http.Response, error) {
	req, err := c.NewUpdateUserRequest(ctx, path, payload, dummyKey, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateUserRequest create the request corresponding to the update action endpoint of the user resource.
func (c *Client) NewUpdateUserRequest(ctx context.Context, path string, payload *User, dummyKey *string, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if dummyKey != nil {
		values.Set("dummy_key", *dummyKey)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}
