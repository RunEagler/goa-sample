// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "User CRUD": Application User Types
//
// Command:
// $ goagen
// --design=GolandProject/goa-sample/src/design
// --out=$(GOPATH)/src/GolandProject/goa-sample/src
// --version=v1.3.1

package client

import (
	"github.com/goadesign/goa"
	"unicode/utf8"
)

// skill user type.
type skill struct {
	// skill name
	Item *string `form:"item,omitempty" json:"item,omitempty" yaml:"item,omitempty" xml:"item,omitempty"`
}

// Validate validates the skill type instance.
func (ut *skill) Validate() (err error) {
	if ut.Item != nil {
		if utf8.RuneCountInString(*ut.Item) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.item`, *ut.Item, utf8.RuneCountInString(*ut.Item), 20, false))
		}
	}
	return
}

// Publicize creates Skill from skill
func (ut *skill) Publicize() *Skill {
	var pub Skill
	if ut.Item != nil {
		pub.Item = ut.Item
	}
	return &pub
}

// Skill user type.
type Skill struct {
	// skill name
	Item *string `form:"item,omitempty" json:"item,omitempty" yaml:"item,omitempty" xml:"item,omitempty"`
}

// Validate validates the Skill type instance.
func (ut *Skill) Validate() (err error) {
	if ut.Item != nil {
		if utf8.RuneCountInString(*ut.Item) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.item`, *ut.Item, utf8.RuneCountInString(*ut.Item), 20, false))
		}
	}
	return
}

// request body type
type user struct {
	// user age
	Age *int `form:"age,omitempty" json:"age,omitempty" yaml:"age,omitempty" xml:"age,omitempty"`
	// user name
	Name *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
	// programming skills
	ProgrammingSkills []*skill `form:"programming_skills,omitempty" json:"programming_skills,omitempty" yaml:"programming_skills,omitempty" xml:"programming_skills,omitempty"`
	// user id
	UserID *int `form:"user_id,omitempty" json:"user_id,omitempty" yaml:"user_id,omitempty" xml:"user_id,omitempty"`
}

// Validate validates the user type instance.
func (ut *user) Validate() (err error) {
	if ut.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "name"))
	}
	if ut.Age == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "age"))
	}
	if ut.ProgrammingSkills == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "programming_skills"))
	}
	for _, e := range ut.ProgrammingSkills {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// Publicize creates User from user
func (ut *user) Publicize() *User {
	var pub User
	if ut.Age != nil {
		pub.Age = *ut.Age
	}
	if ut.Name != nil {
		pub.Name = *ut.Name
	}
	if ut.ProgrammingSkills != nil {
		pub.ProgrammingSkills = make([]*Skill, len(ut.ProgrammingSkills))
		for i2, elem2 := range ut.ProgrammingSkills {
			pub.ProgrammingSkills[i2] = elem2.Publicize()
		}
	}
	if ut.UserID != nil {
		pub.UserID = ut.UserID
	}
	return &pub
}

// request body type
type User struct {
	// user age
	Age int `form:"age" json:"age" yaml:"age" xml:"age"`
	// user name
	Name string `form:"name" json:"name" yaml:"name" xml:"name"`
	// programming skills
	ProgrammingSkills []*Skill `form:"programming_skills" json:"programming_skills" yaml:"programming_skills" xml:"programming_skills"`
	// user id
	UserID *int `form:"user_id,omitempty" json:"user_id,omitempty" yaml:"user_id,omitempty" xml:"user_id,omitempty"`
}

// Validate validates the User type instance.
func (ut *User) Validate() (err error) {
	if ut.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "name"))
	}

	if ut.ProgrammingSkills == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "programming_skills"))
	}
	for _, e := range ut.ProgrammingSkills {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}
